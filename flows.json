[
    {
        "id": "43e2234ade830258",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0da727c664b1f238",
        "type": "wamp-client",
        "address": "wss://192.168.240.100:8086",
        "realm": "zenitel",
        "authId": "erik",
        "password": "mortensen",
        "name": "Zenitel Connect"
    },
    {
        "id": "25a8ae2084c4f7cc",
        "type": "wamp in",
        "z": "43e2234ade830258",
        "role": "subscriber",
        "router": "0da727c664b1f238",
        "topic": "com.zenitel.call_leg",
        "name": "Subscribe com.zenitel.call_leg",
        "x": 140,
        "y": 720,
        "wires": [
            [
                "4a428d366ef81452",
                "e17cecc95389d01a"
            ]
        ]
    },
    {
        "id": "4347e53a4b0e208f",
        "type": "wamp call",
        "z": "43e2234ade830258",
        "router": "0da727c664b1f238",
        "procedure": "com.zenitel.calls.delete",
        "name": "com.zenitel.calls.delete",
        "x": 1450,
        "y": 280,
        "wires": [
            [
                "61f325230882d338"
            ]
        ]
    },
    {
        "id": "0f7d14e1c6b971cf",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle Q-command",
        "func": "function dirnr(mpcdir) {\n    if (mpcdir.charAt(0) == \"F\") {\n        mpcdir = mpcdir.substr(1, 3)\n        if (mpcdir.charAt(0) == \"F\") {\n            mpcdir = mpcdir.substr(1, 2)\n            if (mpcdir.charAt(0) == \"F\") {\n                mpcdir = mpcdir.substr(1, 1)\n            }\n        }\n    }\n    return mpcdir;\n}\n\nvar v = msg.payload\nv = v.replaceAll(\" \", \"\")\nlet char = v.charAt(0)\nlet dira = \"\"\n\nlet lastCmd = flow.get(\"LastCommand\");\n\nif (char == \"Q\")\n{\n    if ( (flow.get(\"LastCommand\") != msg.payload) &&\n        (lastCmd.charAt(0) != \"Q\") )\n    {\n        flow.set(\"LastCommand\", msg.payload);\n\n        dira = v.substr(1, 4)\n        dira = dirnr(dira)\n\n        msg =\n        {\n            topic : 'com.zenitel.calls.delete',\n            payload:\n            {\n                'dirno': dira\n            }\n        }\n    }\n    else\n    {\n        msg =\n        {\n            topic : 'debugText',\n            payload:\n            {\n                'Text': 'Command Skipped - Retransmission'\n            }\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 280,
        "wires": [
            [
                "23e285499307fb03"
            ]
        ]
    },
    {
        "id": "8af5a929a2a6e75e",
        "type": "tcp in",
        "z": "43e2234ade830258",
        "name": "TCP Listen 4711",
        "server": "server",
        "host": "127.0.0.1",
        "port": "4711",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "",
        "topic": "DataIn",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "3245debe32fe3122"
            ]
        ]
    },
    {
        "id": "3245debe32fe3122",
        "type": "switch",
        "z": "43e2234ade830258",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "H",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "I",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Q",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": ">",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "<",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "J",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "?",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 270,
        "y": 300,
        "wires": [
            [
                "ee8442581baa6de2",
                "3f8170d58d307839"
            ],
            [
                "25ded3289db59fe0",
                "3f8170d58d307839"
            ],
            [
                "0f7d14e1c6b971cf",
                "3f8170d58d307839"
            ],
            [
                "246645623130ceb1"
            ],
            [
                "b3f8c92f481d6f9e"
            ],
            [
                "2324a1c4530fd133",
                "3f8170d58d307839"
            ],
            [
                "3f41ac48b9b78289"
            ]
        ]
    },
    {
        "id": "246645623130ceb1",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle >-command",
        "func": "function dirnr(mpcdir) {\n    if (mpcdir.charAt(0) == \"F\") {\n        mpcdir = mpcdir.substr(1, 3)\n        if (mpcdir.charAt(0) == \"F\") {\n            mpcdir = mpcdir.substr(1, 2)\n            if (mpcdir.charAt(0) == \"F\") {\n                mpcdir = mpcdir.substr(1, 1)\n            }\n        }\n    }\n    return mpcdir;\n}\n\nvar v = msg.payload\nv = v.replaceAll(\" \", \"\")\nlet char = v.charAt(0)\nlet dira = \"\"\n\nif (char == '>')\n{\n    dira = v.substr(1, 4)\n    dira = dirnr(dira)\n    msg =\n    {\n        topic: 'com.zenitel.devices.device.key.post',\n        payload:\n        {\n            'dirno': dira,\n            'edge' : \"press\",\n            'id'   : 'm',\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 340,
        "wires": [
            [
                "23e285499307fb03"
            ]
        ]
    },
    {
        "id": "39aa8d77798ca5ad",
        "type": "wamp call",
        "z": "43e2234ade830258",
        "router": "0da727c664b1f238",
        "procedure": "com.zenitel.devices.device.key.post",
        "name": "com.zenitel.devices.device.key.post",
        "x": 1480,
        "y": 340,
        "wires": [
            [
                "b6531395747bd16f"
            ]
        ]
    },
    {
        "id": "3f41ac48b9b78289",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle ?-command",
        "func": "if (flow.get(\"PlatformVersion\") != \"\")\n{\n    msg.payload = flow.get(\"PlatformVersion\");\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 660,
        "wires": [
            [
                "d790a34d537e0ef6"
            ]
        ]
    },
    {
        "id": "a517389bce63894a",
        "type": "wamp call",
        "z": "43e2234ade830258",
        "router": "0da727c664b1f238",
        "procedure": "com.zenitel.system.platform.version",
        "name": "com.zenitel.system.platform.version",
        "x": 920,
        "y": 1240,
        "wires": [
            [
                "5a7136055304ef3c"
            ]
        ]
    },
    {
        "id": "bc6ec9d0f8357f39",
        "type": "tcp out",
        "z": "43e2234ade830258",
        "name": "TCP Out",
        "host": "127.0.0.1",
        "port": "4711",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 1260,
        "y": 720,
        "wires": []
    },
    {
        "id": "d790a34d537e0ef6",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle SW Version",
        "func": "\nvar vers = msg.payload[\"version\"];\nvar fields = vers.split('.')\n\nvar majorVersion = fields[0];\nif (majorVersion.length == 1) majorVersion = '0' + majorVersion;\n\nvar minorVersion = fields[1];\nif (minorVersion.length == 1) minorVersion = '0' + minorVersion;\n\nmsg.payload = \"\\0\" +\"0226 \" + majorVersion + minorVersion + \" \\r\\n\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 660,
        "wires": [
            [
                "bc6ec9d0f8357f39",
                "87f4fc5f4e0672bc"
            ]
        ]
    },
    {
        "id": "6bcc4f7aa1174fae",
        "type": "wamp in",
        "z": "43e2234ade830258",
        "role": "subscriber",
        "router": "0da727c664b1f238",
        "topic": "com.zenitel.call",
        "name": "Subscribe com.zenitel.call",
        "x": 130,
        "y": 880,
        "wires": [
            [
                "270c570dd7840143",
                "553096daebf90a62"
            ]
        ]
    },
    {
        "id": "68afd94bf2485357",
        "type": "wamp in",
        "z": "43e2234ade830258",
        "role": "subscriber",
        "router": "0da727c664b1f238",
        "topic": "com.zenitel.system.open_door",
        "name": "Subscribe com.zenitel.system.open_door",
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "7afe22037d1cc08e"
            ]
        ]
    },
    {
        "id": "59c46da7adb7b537",
        "type": "comment",
        "z": "43e2234ade830258",
        "name": "Subscribe Events",
        "info": "",
        "x": 100,
        "y": 640,
        "wires": []
    },
    {
        "id": "4a428d366ef81452",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle Call Leg Event",
        "func": "\n/**\n* @param {string} dir\n*/\nfunction ConvertDirNoToMPC(dir)\n{\n   var MPC_dirNo = \"\";\n   if (dir != null)\n   {\n      MPC_dirNo = dir;\n   }\n\n   if (MPC_dirNo.length == 0) MPC_dirNo = 'F' + MPC_dirNo;\n   if (MPC_dirNo.length == 1) MPC_dirNo = 'F' + MPC_dirNo;\n   if (MPC_dirNo.length == 2) MPC_dirNo = 'F' + MPC_dirNo;\n   if (MPC_dirNo.length == 3) MPC_dirNo = 'F' + MPC_dirNo;\n\n   return MPC_dirNo;\n}\n\nvar txt = \"\";\nvar state = msg.payload.args[0][\"state\"];\nvar dirNo = ConvertDirNoToMPC(msg.payload.args[0][\"dirno\"]);\n\nif (state == \"ended\")\n{\n   txt =  \"\\0\" + \"0206 \" + dirNo + \" \\r\\n\" +\n          \"\\0\" + \"0201 \" + dirNo + \" \\r\\n\";\n}\nelse if (state == \"init\")\n{\n   txt = \"\\0\" + \"0200 \" + dirNo + \" \\r\\n\";\n}\n\nif (txt == \"\")\n{\n   return null;\n}\nmsg.payload = txt;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 720,
        "wires": [
            [
                "bc6ec9d0f8357f39",
                "28c7b60540e0f7eb"
            ]
        ]
    },
    {
        "id": "270c570dd7840143",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle Call Event",
        "func": "/**\n* @param {string} dir\n*/\nfunction ConvertDirNoToMPC(dir)\n{\n    var MPC_dirNo = \"\";\n    if (dir != null) {\n        MPC_dirNo = dir;\n    }\n\n    if (MPC_dirNo.length == 0) MPC_dirNo = 'F' + MPC_dirNo;\n    if (MPC_dirNo.length == 1) MPC_dirNo = 'F' + MPC_dirNo;\n    if (MPC_dirNo.length == 2) MPC_dirNo = 'F' + MPC_dirNo;\n    if (MPC_dirNo.length == 3) MPC_dirNo = 'F' + MPC_dirNo;\n\n    return MPC_dirNo;\n}\n\nvar txt      = \"\";\nvar state    = msg.payload.args[0][\"state\"];\nvar callType = msg.payload.args[0][\"call_type\"];\nvar reason   = msg.payload.args[0][\"reason\"];\nvar src      = ConvertDirNoToMPC(msg.payload.args[0][\"from_dirno\"]);\nvar dst      = ConvertDirNoToMPC(msg.payload.args[0][\"to_dirno\"]);\n\nif (callType == \"normal_call\")\n{\n    if (state == \"ringing\")\n    {\n        if (reason == \"busy\")\n        {\n            txt = \"\\0\" + \"0502 \" + src + \" \" + dst + \" 0000 0000\" + \" \\r\\n\";\n        }\n        else\n        {\n            txt = \"\\0\" + \"0503 \" + src + \" \" + dst + \" 0000 0000\" + \" \\r\\n\";\n        }\n    }\n    else\n    {\n        if (state == \"in_call\")\n        {\n            txt = \"\\0\" + \"0504 \" + src + \" \" + dst + \" 0000 0000\" + \" \\r\\n\";\n        }\n    }\n}\nelse if (state == \"queued\")\n{\n     txt = \"\\0\" + \"0507 \" + src + \" \" + dst + \" 0000 0000\" + \" \\r\\n\";\n}\n\nif (txt== \"\")\n{\n    return null;\n}\nmsg.payload = txt;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 880,
        "wires": [
            [
                "bc6ec9d0f8357f39",
                "957277526e817ade"
            ]
        ]
    },
    {
        "id": "7afe22037d1cc08e",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle Open Door Event",
        "func": "\n/**\n* @param {string} dir\n*/\nfunction ConvertDirNoToMPC(dir) {\n    var MPC_dirNo = \"\";\n    if (dir != null) {\n        MPC_dirNo = dir;\n    }\n\n    if (MPC_dirNo.length == 0) MPC_dirNo = 'F' + MPC_dirNo;\n    if (MPC_dirNo.length == 1) MPC_dirNo = 'F' + MPC_dirNo;\n    if (MPC_dirNo.length == 2) MPC_dirNo = 'F' + MPC_dirNo;\n    if (MPC_dirNo.length == 3) MPC_dirNo = 'F' + MPC_dirNo;\n\n    return MPC_dirNo;\n}\n\nvar doorDirNo = ConvertDirNoToMPC(msg.payload.args[0][\"door_dirno\"]);\nvar fromDirNo = ConvertDirNoToMPC(msg.payload.args[0][\"from_dirno\"]);\n\nvar txt = \"\\0\" + \"02A6 \" + doorDirNo + \" \\r\\n\";\n\nmsg.payload = txt;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1040,
        "wires": [
            [
                "bc6ec9d0f8357f39"
            ]
        ]
    },
    {
        "id": "ee8442581baa6de2",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle H-command",
        "func": "function dirnr(mpcdir)\n{\n    if (mpcdir.charAt(0) == \"F\")\n    {\n        mpcdir = mpcdir.substr(1, 3)\n        if (mpcdir.charAt(0) == \"F\")\n        {\n            mpcdir = mpcdir.substr(1, 2)\n            if (mpcdir.charAt(0) == \"F\")\n            {\n                mpcdir = mpcdir.substr(1, 1)\n            }\n        }\n    }\n    return mpcdir;\n}\n\nvar v = msg.payload\nv = v.replaceAll(\" \", \"\")\nlet char = v.charAt(0)\nlet dira = \"\"\nlet dirb = \"\"\n\nif (char == \"H\")\n{\n    dira = v.substr(1, 4)\n    dirb = v.substr(5, 4)\n    dira = dirnr(dira)\n    dirb = dirnr(dirb)\n\n    flow.set(\"Last_Q_Dirno\", \"\");\n\n    if (flow.get(\"LastCommand\") != msg.payload)\n    {\n        flow.set(\"LastCommand\", msg.payload);\n\n        for (var i = 0; i < dirb.length; i++)\n        { \n            var newMsg =\n            {\n                topic : 'com.zenitel.devices.device.key.post',\n                payload:\n                {             \n                    'dirno': dira,\n                    'id': dirb.charAt(i),\n                    'edge' : 'tap',               \n                }\n            }       \n            node.send(newMsg);\n        }\n    }\n    else {\n        msg =\n        {\n            topic: 'debugText',\n            payload:\n            {\n                'Text': 'Command Skipped - Retransmission'\n            }\n        }      \n    }\n}\nelse\n{\n    //while error with sending keys is not solved\n    msg = null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 100,
        "wires": [
            [
                "23e285499307fb03"
            ]
        ]
    },
    {
        "id": "906890157b06d605",
        "type": "wamp call",
        "z": "43e2234ade830258",
        "router": "0da727c664b1f238",
        "procedure": "com.zenitel.calls.post",
        "name": "com.zenitel.calls.post",
        "x": 1440,
        "y": 220,
        "wires": [
            [
                "c8f6fda545b097f9"
            ]
        ]
    },
    {
        "id": "25ded3289db59fe0",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle I-command",
        "func": "function dirnr(mpcdir)\n{\n    if (mpcdir.charAt(0) == \"F\")\n    {\n        mpcdir = mpcdir.substr(1, 3)\n        if (mpcdir.charAt(0) == \"F\")\n        {\n            mpcdir = mpcdir.substr(1, 2)\n            if (mpcdir.charAt(0) == \"F\")\n            {\n                mpcdir = mpcdir.substr(1, 1)\n            }\n        }\n    }\n    return mpcdir;\n}\n\nvar v = msg.payload\nv = v.replaceAll(\" \", \"\")\nlet char = v.charAt(0)\nlet dira = \"\"\nlet dirb = \"\"\n\nif (char == \"I\")\n{\n    if (flow.get(\"LastCommand\") != msg.payload)\n    {\n        flow.set(\"LastCommand\", msg.payload);\n\n        dira = v.substr(1, 4)\n        dirb = v.substr(5, 4)\n        dira = dirnr(dira)\n        dirb = dirnr(dirb)\n\n        msg =\n        {\n            topic: 'com.zenitel.calls.post',\n            payload:\n            {\n                'from_dirno': dira,\n                'to_dirno': dirb,\n                'action': 'setup',\n                'verbose': false\n            }\n        }\n    }\n    else\n    {\n        msg =\n        {\n            topic: 'debugText',\n            payload:\n            {\n                'Text': 'Command Skipped - Retransmission'\n            }\n        }\n    }\n}\nelse\n{\n    msg = null;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 220,
        "wires": [
            [
                "23e285499307fb03"
            ]
        ]
    },
    {
        "id": "5508392566e675db",
        "type": "wamp call",
        "z": "43e2234ade830258",
        "router": "0da727c664b1f238",
        "procedure": "com.zenitel.call_legs",
        "name": "com.zenitel.call_legs",
        "x": 760,
        "y": 500,
        "wires": [
            [
                "bcca0081551ec97f"
            ]
        ]
    },
    {
        "id": "2324a1c4530fd133",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle J-command",
        "func": "function dirnr(mpcdir)\n{\n    if (mpcdir.charAt(0) == \"F\")\n    {\n        mpcdir = mpcdir.substr(1, 3)\n        if (mpcdir.charAt(0) == \"F\")\n        {\n            mpcdir = mpcdir.substr(1, 2)\n            if (mpcdir.charAt(0) == \"F\")\n            {\n                mpcdir = mpcdir.substr(1, 1)\n            }\n        }\n    }\n    return mpcdir;\n}\n\nif (flow.get(\"LastCommand\") != msg.payload)\n{\n    flow.set(\"LastCommand\", msg.payload);\n\n    var v = msg.payload\n    v = v.replaceAll(\" \", \"\")\n    let char = v.charAt(0)\n    let dira = \"\"\n    let dirb = \"\"\n\n    if (char == 'J') {\n        dira = v.substr(1, 4)\n        dirb = v.substr(5, 4)\n        dira = dirnr(dira)\n        dirb = dirnr(dirb)\n\n        flow.set(\"J_Asub\", dira);\n        flow.set(\"J_Bsub\", dirb);\n\n        msg =\n        {\n            payload:\n            {\n                // Request Entire Call Leg List - No Filter\n                //            'from_dirno' : dira,\n                //            'to_dirno'   : dirb,\n                //            'dirno'      : \"\",\n                //            'leg_id'     : \"\",\n                //            'call_id'    : \"\",\n                //            'state'      : \"\",\n                //            'leg_role'   : \"\",\n                //            'verbose' : 'true',\n            }\n        }\n    }\n}\nelse\n{\n    msg = null;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 500,
        "wires": [
            [
                "5508392566e675db"
            ]
        ]
    },
    {
        "id": "b3f8c92f481d6f9e",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle <-command",
        "func": "function dirnr(mpcdir) {\n    if (mpcdir.charAt(0) == \"F\") {\n        mpcdir = mpcdir.substr(1, 3)\n        if (mpcdir.charAt(0) == \"F\") {\n            mpcdir = mpcdir.substr(1, 2)\n            if (mpcdir.charAt(0) == \"F\") {\n                mpcdir = mpcdir.substr(1, 1)\n            }\n        }\n    }\n    return mpcdir;\n}\n\nvar v = msg.payload\nv = v.replaceAll(\" \", \"\")\nlet char = v.charAt(0)\nlet dira = \"\"\n\nif (char == '<') {\n    dira = v.substr(1, 4)\n    dira = dirnr(dira)\n    msg =\n    {\n        topic: 'com.zenitel.devices.device.key.post',\n        payload:\n        {\n            'dirno': dira,\n            'edge': \"release\",\n            'id': 'm',\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 400,
        "wires": [
            [
                "23e285499307fb03"
            ]
        ]
    },
    {
        "id": "bcca0081551ec97f",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle Call Leg List",
        "func": "/**\n* @param {String} CallId\n* @param {String} CallType\n* @param {String} Channel\n* @param {String} DirNo\n* @param {String} FromDirNo\n* @param {String} LegId\n* @param {String} Role\n* @param {String} Priority\n* @param {String} Reason\n* @param {String} State\n* @param {String} ToDirNo\n*/\n//**********************************************************************************************\nfunction wamp_call_leg_element(CallId, CallType, Channel, DirNo, FromDirNo, LegId,\n                               Role, Priority, Reason, State, ToDirNo)\n//**********************************************************************************************\n{\n        this.CallId = CallId;\n        this.CallType = CallType;\n        this.Channel = Channel;\n        this.DirNo = DirNo;\n        this.FromDirNo = FromDirNo;\n        this.LegId = LegId;\n        this.Role = Role;\n        this.Priority = Priority;\n        this.Reason = Reason;\n        this.State = State;\n        this.ToDirNo = ToDirNo;\n }\n\n var call_leg_list = new Array();\n\n\n\n/**\n* @param {String} Message\n*/\n//**********************************************************************************************\nfunction DebugMessage(Message)\n//**********************************************************************************************\n{\n    var newMsg =\n    {\n        topic: 'debugText',\n        payload:\n        {\n            'Text': Message,\n        }\n    }\n    node.send(newMsg)\n}\n\n\n\n/**\n* @param {String} Sub\n*/\n//**********************************************************************************************\nfunction FindNormalCall(Sub)\n//**********************************************************************************************\n{\n    // Find call in a normal calls\n    var Index = -1;\n    var found = false;\n\n    if (call_leg_list.length > 0)\n    {\n        var i = 0;   \n\n        while ((!found) && (i < call_leg_list.length))\n        {\n            var txt = \"List.From: \" + call_leg_list[i].FromDirNo +\n                      \". List.To: \" + call_leg_list[i].ToDirNo +\n                      \". A_sub: \" + Sub;\n            DebugMessage(txt);          \n\n            if ((call_leg_list[i].CallType == \"normal_call\") &&\n                (call_leg_list[i].DirNo == Sub))\n            {\n                found = true;\n                Index = i;\n            }\n            i++;\n        }\n    }\n    if (found)\n    {\n        var txt = \"FindNormalCall - Index: \" + Index.toString();\n        DebugMessage(txt);\n    }\n    else\n    {\n        var txt = \"FindNormalCall - Not found.\";\n        DebugMessage(txt);\n    }\n\n    return Index;\n}\n\n\n//**********************************************************************************************\n/**\n* @param {String} asub (called sub)\n* @param {String} bsub (calling sub)\n*/\nfunction FindQueuedCall(asub,bsub)\n//**********************************************************************************************\n{\n    // Find call in a queued calls\n    // bsub is call into a queue which is operated by asub\n    var Index = -1;\n    var found = false;\n\n    if (call_leg_list.length > 0)\n    {\n        var i = 0;\n\n        while ((!found) && (i < call_leg_list.length))\n        {\n            var txt = \"FindQueuedCall. List[\" + i.toString() + \"].FromDirNo: \" + call_leg_list[i].FromDirNo +\n                \". List[\" + i.toString() + \"].ToDirNo: \" + call_leg_list[i].ToDirNo +\n                \". A_sub: \" + asub;\n\n            DebugMessage(txt);\n\n            if ((call_leg_list[i].CallType == \"queue_call\") &&\n                (call_leg_list[i].DirNo == asub) &&\n                (call_leg_list[i].FromDirNo == bsub))\n            {\n                found = true;\n                Index = i;\n            }\n            i++;\n        }\n    }\n    if (found)\n    {\n        var txt = \"FindQueuedCall - Index: \" + Index.toString();\n        DebugMessage(txt);\n    }\n    else\n    {\n        var txt = \"FindQueuedCall - Not found.\";\n        DebugMessage(txt);\n    }\n\n    return Index;\n}\n\n\n/**\n* @param {String} Sub\n*/\n//**********************************************************************************************\nfunction StationIsFree(Sub)\n//**********************************************************************************************\n{\n    var IsFree = true;\n\n    if (call_leg_list.length > 0)\n    {\n        var i = 0;\n\n        while ((IsFree) && (i < call_leg_list.length ))\n        {\n             var txt = \"StationIsFree. List[\" + i.toString() + \"].FromDirNo: \" + call_leg_list[i].FromDirNo +\n                \". List[\" + i.toString() + \"].ToDirNo: \" + call_leg_list[i].ToDirNo +\n                \". A_sub: \" + Sub;\n\n            DebugMessage(txt);\n\n\n            if (call_leg_list[i].FromDirNo == Sub)\n            {\n                IsFree = false;\n            }\n            else\n            {\n                if (call_leg_list[i].ToDirNo == Sub)\n                {\n                    IsFree = false;\n                }\n            }\n            i++;\n        } \n    }\n    var txt = \"StationIsFree. Return: \" + IsFree.toString();\n    DebugMessage(txt);\n\n    return IsFree;\n}\n\n\n/**\n* @param {String} asub\n* @param {String} bsub\n*/\n//**********************************************************************************************\nfunction StationsAreConnected(asub, bsub)\n//**********************************************************************************************\n{\n    var AreConnected = false;\n\n    if (call_leg_list.length > 0)\n    {\n        var i = 0;\n\n        while ((!AreConnected) && (i < call_leg_list.length))\n        {\n            var fromDir = call_leg_list[i].FromDirNo;\n            var toDir = call_leg_list[i].ToDirNo;\n            var state = call_leg_list[i].State;\n\n            if (state == \"in_call\")\n            {\n                if ( ((fromDir == asub) && (toDir == bsub)) ||\n                     ((fromDir == bsub) && (toDir == asub)) )\n                {\n                    AreConnected = true;\n                }\n            }\n \n            i++;\n        }\n    }\n\n    var txt = \"StationsAreConnected. Return: \" + AreConnected.toString();\n    DebugMessage(txt);\n\n    return AreConnected;\n}\n\n\n/**\n* @param {String} asub\n*/\n//**********************************************************************************************\nfunction SendDeleteCalls(asub)\n//**********************************************************************************************\n{\n    var newMsg =\n    {\n        payload:\n        {\n            'procedure': 'com.zenitel.calls.delete',\n            'dirno': asub,\n        }\n    }\n    node.send(newMsg);\n}\n\n\n/**\n* @param {String} asub\n* @param {String} bsub\n*/\n//**********************************************************************************************\nfunction SendSetupCall(asub, bsub)\n//**********************************************************************************************\n{\n    var newMsg =\n    {\n        topic: 'com.zenitel.calls.post',\n        payload :\n        {\n            'from_dirno': asub,\n            'to_dirno': bsub,\n            'action': 'setup',\n            'verbose': true        \n        }\n    }\n    node.send(newMsg);\n}\n\n\n/**\n* @param {String} asub\n* @param {String} bsub\n*/\n//**********************************************************************************************\nfunction SendAnswerCall(asub, bsub)\n//**********************************************************************************************\n{\n    var newMsg =\n    {\n        topic: 'com.zenitel.calls.post',\n        payload:\n        {\n            'from_dirno': asub,\n            'to_dirno': bsub,\n            'action': 'answer',\n            'verbose': true\n        }\n    }\n    node.send(newMsg);\n}\n\n\n/**\n* @param {String} asub\n* @param {String} key\n*/\n//**********************************************************************************************\nfunction SendKeyPressed(asub, key)\n//**********************************************************************************************\n{\n    var newMsg =\n    {\n        topic : 'com.zenitel.devices.device.key.post',\n        payload:\n        {             \n           'dirno': asub,\n           'id'   : key,\n           'edge' : 'tap',               \n        }\n    }       \n    node.send(newMsg);\n}\n\n\n//**********************************************************************************************\n// Node Code Start\n//**********************************************************************************************\n\n//----------------------------------------------------------------------------------------------\n// Switch case:\n//----------------------------------------------------------------------------------------------\nconst CaseDeleteCalls = '1';\nconst CaseSetupCall   = '2';\nconst CaseAnswerCall  = '3';\nconst CaseDebugText   = '4';\nconst CaseDoNotning   = '5';\n\nvar nextTest = true;\nvar J_asub = flow.get(\"J_Asub\"); // Get the A-sub from J-command entry\nvar J_bsub = flow.get(\"J_Bsub\"); // Get the B-sub from J-command entry\n\nif (msg.payload[0] != null)\n{\n    // Build list of calls from call leg list.\n    var txt =  \"\"; \n    var i = 0;\n\n    while (msg.payload[i] != null)\n    {\n        var callId    = msg.payload[i][\"call_id\"];\n        var callType  = msg.payload[i][\"call_type\"];\n        var channel   = msg.payload[i][\"channel\"];\n        var dirNo     = msg.payload[i][\"dirno\"];\n        var fromDirNo = msg.payload[i][\"from_dirno\"];\n        var legId     = msg.payload[i][\"leg_id\"];\n        var legRole   = msg.payload[i][\"leg_role\"];\n        var priority  = msg.payload[i][\"priority\"];\n        var reason    = msg.payload[i][\"reason\"];\n        var state     = msg.payload[i][\"state\"];\n        var toDirNo   = msg.payload[i][\"to_dirno\"];\n     \n        txt = \"On Call Leg Status Event\" +\n              \". call_id: \"    + callId + \n              \". call_type: \"  + callType +\n              \". channel: \"    + channel +\n              \". dirno: \"      + dirNo +\n              \". from_dirno: \" + fromDirNo +\n              \". leg_id: \"     + legId +\n              \". leg_role: \"   + legRole +\n              \". priority: \"   + priority +\n              \". reason: \"     + reason +\n              \". state: \"      + state +\n              \". to_dirno: \"   + toDirNo;\n\n        DebugMessage(txt);\n \n\n        i++;\n\n        call_leg_list.push(new wamp_call_leg_element(callId,callType,channel,dirNo,fromDirNo,\n                            legId,legRole,priority,reason,state,toDirNo));\n    }\n    \n    txt = \"No of elements in list: \" + call_leg_list.length.toString();\n    DebugMessage(txt);\n}\n\n// Assume to return nothing to do\nmsg.payload =\n{\n    'procedure': 'noAction',\n    'text': \"No further Action\",\n}\n\n\n//----------------------------------------------------------------------------------------------\n//Test if A-sub and B-sub are free\n//----------------------------------------------------------------------------------------------\nif (StationIsFree(J_asub))\n{\n    if (StationIsFree(J_bsub))\n    {\n        var txt = \"Subscriber \" + J_asub + \" and \" + \"Subscriber \" + J_bsub + \" are free\";\n        DebugMessage(txt);\n\n        SendSetupCall(J_asub, J_bsub);\n        nextTest = false; // Case found - stop searching\n    }\n}\n\n\n//----------------------------------------------------------------------------------------------\n//Test if A-sub and B-sub are connected\n//----------------------------------------------------------------------------------------------\nif (nextTest)\n{\n    if (StationsAreConnected(J_asub, J_bsub))\n    {\n        // Stations are already connected - do nothing\n\n        nextTest = false; // Case found - stop searching\n    }\n}\n\n/*\nasync function Wait_1000_ms()\n{\n  console.log('start timer');\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  console.log('after 1000 ms');\n}\n\n\nfunction delay(time) {\n    return new Promise(resolve => setTimeout(resolve, time));\n}\n\nasync function test() {\n    console.log('start timer');\n    await delay(1000);\n    console.log('after 1 second');\n}\n*/\n\n\n//----------------------------------------------------------------------------------------------\n//Test if A-sub or B-Sub is in a active call -> clear down.\n//----------------------------------------------------------------------------------------------\nif (nextTest)\n{\n    var i_asub = FindNormalCall(J_asub);\n    var i_bsub = FindNormalCall(J_bsub);\n\n    if ((i_asub >= 0) || (i_bsub >= 0))\n    {\n        if (((i_asub >= 0) && (call_leg_list[i_asub].State == \"in_call\")) ||\n            ((i_bsub >= 0) && (call_leg_list[i_bsub].State == \"in_call\")) )\n        {\n            if (i_asub >= 0)\n            {\n                var txt = \"A-Sub: \" + J_asub + \" is busy. Clear Down.\";\n                DebugMessage(txt);\n\n                SendDeleteCalls(J_asub);\n            }\n\n            if (i_bsub >= 0)\n            {\n                var txt = \"B-Sub: \" + J_bsub + \" is busy. Clear Down.\";\n                DebugMessage(txt);\n\n                SendDeleteCalls(J_bsub);\n            }\n\n            //Establish call\n            var txt = \"Establish call. A-Sub: \" + J_asub + \". B-Sub: \" + J_bsub;\n            DebugMessage(txt);\n\n            // Wait_1000_ms();\n            SendSetupCall(J_asub, J_bsub);\n        }\n        else\n        {\n            if ((i_asub >= 0) && (call_leg_list[i_asub].State == \"ringing\"))\n            {\n                //Answer call\n                var txt = \"Answer call (m). A-Sub: \" + J_asub + \". B-Sub: \" + J_bsub;\n                DebugMessage(txt);\n\n                SendKeyPressed(J_asub, 'm');\n\n//                SendAnswerCall(J_bsub, J_asub);\n            }\n            else\n            {\n                if ((i_bsub >= 0) && (call_leg_list[i_bsub].State == \"ringing\"))\n                {\n                    //Answer call\n                    var txt = \"Answer call (answer). A-Sub: \" + J_asub + \". B-Sub: \" + J_bsub;\n                    DebugMessage(txt);\n\n                    SendAnswerCall(J_asub, J_bsub);\n                }\n\n            }\n        }\n        nextTest = false; // Case found - stop searching\n    }\n    else\n    {\n        var i_asub = FindQueuedCall(J_asub, J_bsub);\n        var i_bsub = FindQueuedCall(J_bsub, J_asub);\n\n        if ((i_asub >= 0) && (call_leg_list[i_asub].State == \"ringing\"))\n        {\n            //Answer call\n            var txt = \"Answer call. A-Sub: \" + J_asub + \". B-Sub: \" + J_bsub;\n            DebugMessage(txt);\n\n            SendAnswerCall(J_bsub, J_asub);\n        }\n\n        if ((i_bsub >= 0) && (call_leg_list[i_bsub].State == \"ringing\"))\n        {\n            //Answer call\n            var txt = \"Answer call. A-Sub: \" + J_asub + \". B-Sub: \" + J_bsub;\n            DebugMessage(txt);\n\n            SendAnswerCall(J_asub, J_bsub)\n        }\n\n        nextTest = false; // Case found - stop searching\n    }\n\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 560,
        "wires": [
            [
                "e43365a1bf8af60d"
            ]
        ]
    },
    {
        "id": "b66680b2757ede19",
        "type": "comment",
        "z": "43e2234ade830258",
        "name": "Receive Command from Client",
        "info": "",
        "x": 150,
        "y": 200,
        "wires": []
    },
    {
        "id": "23e285499307fb03",
        "type": "switch",
        "z": "43e2234ade830258",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "com.zenitel.calls.post",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "com.zenitel.calls.delete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "com.zenitel.devices.device.key.post",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "debugText",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "noAction",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 910,
        "y": 240,
        "wires": [
            [
                "906890157b06d605"
            ],
            [
                "4347e53a4b0e208f"
            ],
            [
                "39aa8d77798ca5ad"
            ],
            [
                "c6ac2d789824a10a"
            ],
            [
                "b85c66ec3fa1b376"
            ]
        ]
    },
    {
        "id": "c6ac2d789824a10a",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "Debug Text",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 440,
        "wires": []
    },
    {
        "id": "b85c66ec3fa1b376",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "No Action",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 520,
        "wires": []
    },
    {
        "id": "c121ce5ac6a889e1",
        "type": "comment",
        "z": "43e2234ade830258",
        "name": "Remove the key / value \"procedure\" in msg.payload ",
        "info": "",
        "x": 1450,
        "y": 160,
        "wires": []
    },
    {
        "id": "e43365a1bf8af60d",
        "type": "switch",
        "z": "43e2234ade830258",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "com.zenitel.calls.post",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "com.zenitel.calls.delete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "com.zenitel.devices.device.key.post",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "debugText",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "noAction",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1030,
        "y": 560,
        "wires": [
            [
                "8e3e7bdaaa0b5b29"
            ],
            [
                "4347e53a4b0e208f"
            ],
            [
                "39aa8d77798ca5ad"
            ],
            [
                "c6ac2d789824a10a"
            ],
            [
                "b85c66ec3fa1b376"
            ]
        ]
    },
    {
        "id": "8e3e7bdaaa0b5b29",
        "type": "delay",
        "z": "43e2234ade830258",
        "name": "Delay 1000 ms",
        "pauseType": "delay",
        "timeout": "1000",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 460,
        "wires": [
            [
                "906890157b06d605"
            ]
        ]
    },
    {
        "id": "5c8574455d32d935",
        "type": "comment",
        "z": "43e2234ade830258",
        "name": "Zenitel Connect Pro / MPC Converter - Version 1.0.1",
        "info": "",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "79433bb8d4c2ee72",
        "type": "comment",
        "z": "43e2234ade830258",
        "name": "Retrieve Currrent Call Leg List",
        "info": "",
        "x": 760,
        "y": 440,
        "wires": []
    },
    {
        "id": "f24efddc2d3033be",
        "type": "comment",
        "z": "43e2234ade830258",
        "name": "Allow clean up before Calling ",
        "info": "",
        "x": 1020,
        "y": 400,
        "wires": []
    },
    {
        "id": "3f8170d58d307839",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "Received Call Command",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "28c7b60540e0f7eb",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "Sent Call Leg Event",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 800,
        "wires": []
    },
    {
        "id": "957277526e817ade",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "Sent Call Event",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 940,
        "wires": []
    },
    {
        "id": "553096daebf90a62",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "Received Call Event",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 140,
        "y": 960,
        "wires": []
    },
    {
        "id": "e17cecc95389d01a",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "Received Call Leg Event",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 150,
        "y": 800,
        "wires": []
    },
    {
        "id": "10c0d591625cd509",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Initialization",
        "func": "flow.set(\"LastCommand\", \"\");\nflow.set(\"PlatformVersion\", \"\");\nflow.set(\"ZPC_Connection_OK\", \"false\");\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1200,
        "wires": []
    },
    {
        "id": "87f4fc5f4e0672bc",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "Send Platfotm Version",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 640,
        "wires": []
    },
    {
        "id": "c8f6fda545b097f9",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 220,
        "wires": []
    },
    {
        "id": "61f325230882d338",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 280,
        "wires": []
    },
    {
        "id": "b6531395747bd16f",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 340,
        "wires": []
    },
    {
        "id": "c83b1ffe12ed87b0",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "Platform Version Saved",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1320,
        "wires": []
    },
    {
        "id": "392702ec96f8c2f2",
        "type": "status",
        "z": "43e2234ade830258",
        "name": "Subscriber ZCP Connection Event",
        "scope": [
            "a517389bce63894a"
        ],
        "x": 160,
        "y": 1340,
        "wires": [
            [
                "374d0bb481eace41"
            ]
        ]
    },
    {
        "id": "2340cdde0b7ffa42",
        "type": "debug",
        "z": "43e2234ade830258",
        "name": "Output ZCP Connection Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1380,
        "wires": []
    },
    {
        "id": "dd1e7d9c3186b0d0",
        "type": "switch",
        "z": "43e2234ade830258",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "com.zenitel.system.platform.version",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 1340,
        "wires": [
            [
                "a517389bce63894a"
            ],
            [
                "2340cdde0b7ffa42"
            ]
        ]
    },
    {
        "id": "374d0bb481eace41",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Handle ZCP Connection Status",
        "func": "//**********************************************************************************************\nfunction DebugMessage(Message)\n//**********************************************************************************************\n{\n    var newMsg =\n    {\n        topic: 'debugText',\n        payload:\n        {\n            'Text': Message\n        }\n    }\n    node.send(newMsg)\n}\n\nvar txt = \"Text: \" + msg.status.text;\nDebugMessage(txt);\n\n//true if ZCP connection is OK\nvar ZCP_OK = (flow.get(\"ZPC_Connection_OK\").indexOf(\"true\") != -1);\n\nif (msg.status.text.indexOf(\"status.connected\") !== -1) {\n    txt = \" ***** ZCP is connected  *****\";\n    DebugMessage(txt);\n\n    if (!ZCP_OK) {\n        flow.set(\"ZPC_Connection_OK\", \"true\");\n        txt = \"ZCP_Connection set to true\";\n        DebugMessage(txt);\n\n        msg.payload = \"\";\n        msg.topic = 'com.zenitel.system.platform.version';\n        return msg;\n    }\n}\nelse {\n    txt = \" ***** ZCP is disconnected  *****\";\n    DebugMessage(txt);\n\n    if (ZCP_OK) {\n        flow.set(\"ZPC_Connection_OK\", \"false\");\n        txt = \"ZCP_Connection set to false\";\n        DebugMessage(txt);\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1340,
        "wires": [
            [
                "dd1e7d9c3186b0d0"
            ]
        ]
    },
    {
        "id": "5a7136055304ef3c",
        "type": "function",
        "z": "43e2234ade830258",
        "name": "Save Platform Version",
        "func": "/**\n* @param {string} str\n*/\n\nfunction firstChar(str) {\n    for (var i = 0; i < str.length; i += 1) {\n        if ((str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') ||\n            (str.charAt(i) >= 'a' && str.charAt(i) <= 'z')) {\n            return str.charAt(i);\n        }\n    }\n    return \"\";\n}\n\nvar vers = msg.payload[\"version\"];\nvar firstLetter = firstChar(vers);\n\nif (firstLetter != \"\")\n{\n    //There is letters (a-z,A-Z) in the version number;\n    msg.payload.version = \"0.0.0.0\";\n}\n\nflow.set(\"PlatformVersion\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1320,
        "wires": [
            [
                "c83b1ffe12ed87b0"
            ]
        ]
    },
    {
        "id": "b85f8f4cf85b6cf4",
        "type": "inject",
        "z": "43e2234ade830258",
        "name": "Start Init",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 1200,
        "wires": [
            [
                "10c0d591625cd509"
            ]
        ]
    },
    {
        "id": "7e966c4a0f09f6f2",
        "type": "comment",
        "z": "43e2234ade830258",
        "name": "Initialization of Flow Variables",
        "info": "",
        "x": 140,
        "y": 1140,
        "wires": []
    },
    {
        "id": "8de4961c109405d9",
        "type": "comment",
        "z": "43e2234ade830258",
        "name": "Monitor ZCP Connection",
        "info": "",
        "x": 130,
        "y": 1280,
        "wires": []
    }
]